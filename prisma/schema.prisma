generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("userId")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String             @id @unique @default(cuid())
  name            String?
		username								String?
  image           String?
  email           String?            @unique
  emailVerified   DateTime?          @map("emailVerified")
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  role            Role               @default(USER)
  accounts        Account[]
  sessions        Session[]
  likedComments   CommentLike[]
  likedVersus    VersusLike[]
  votedVersus    VersusOptionVote[]
  createdVersus  Versus[]
  createdComments Comment[]

  @@map(name: "users")
}

enum Role {
  ADMIN
  USER
  MODERATOR
}

model Versus {
  id          Int            @id @unique @default(autoincrement())
  author      User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  title       String
  options     VersusOption[]
  description String?
  likes       VersusLike[]
  status      VersusStatus
  comments    Comment[]
  tags        Int[]          @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, authorId])
  @@map(name: "versus")
}

model VersusOption {
  id       String             @unique @default(cuid())
  text     String
  votes    VersusOptionVote[]
  versus   Versus             @relation(fields: [versusId], references: [id], onDelete: Cascade)
  versusId Int

  @@unique([versusId, text])
  @@unique([versusId, id])
  @@map(name: "options")
}

model VersusOptionVote {
  option   VersusOption @relation(fields: [optionId, versusId], references: [id, versusId], onDelete: Cascade)
  optionId String
  versusId Int
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String

  @@unique([userId, versusId])
  @@map(name: "votes")
}

model VersusLike {
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  versus   Versus @relation(fields: [versusId], references: [id], onDelete: Cascade)
  versusId Int

  @@unique([versusId, userId])
  @@map(name: "versusLikes")
}

model Comment {
  id        String        @id @default(cuid())
  message   String
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  versus    Versus        @relation(fields: [versusId], references: [id], onDelete: Cascade)
  versusId  Int
  parentId  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  likes     CommentLike[]
  replies   Comment[]     @relation("comment_replies")
  parent    Comment?      @relation("comment_replies", fields: [parentId], references: [id])

  @@unique([authorId, id])
  @@map(name: "comments")
}

model CommentLike {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@unique([commentId, userId])
  @@map(name: "commentLikes")
}

enum VersusStatus {
  PENDING
  APPROVED
  REJECTED
}
